// Place your key bindings in this file to override the defaults
[
	{
		"key": "space",
		"command": "vspacecode.space",
		"when": "activeEditorGroupEmpty && focusedView == '' && !whichkeyActive && !inputFocus"
	},
	{
		"key": "space",
		"command": "vspacecode.space",
		"when": "sideBarFocus && !inputFocus && !whichkeyActive"
	},
	{
		"key": "tab",
		"command": "extension.vim_tab",
		"when": "editorTextFocus && vim.active && !inDebugRepl && vim.mode != 'Insert' && editorLangId != 'magit'"
	},
	{
		"key": "tab",
		"command": "-extension.vim_tab",
		"when": "editorTextFocus && vim.active && !inDebugRepl && vim.mode != 'Insert'"
	},
	{
		"key": "x",
		"command": "magit.discard-at-point",
		"when": "editorTextFocus && editorLangId == 'magit' && vim.mode =~ /^(?!SearchInProgressMode|CommandlineInProgress).*$/"
	},
	{
		"key": "k",
		"command": "-magit.discard-at-point"
	},
	{
		"key": "-",
		"command": "magit.reverse-at-point",
		"when": "editorTextFocus && editorLangId == 'magit' && vim.mode =~ /^(?!SearchInProgressMode|CommandlineInProgress).*$/"
	},
	{
		"key": "v",
		"command": "-magit.reverse-at-point"
	},
	{
		"key": "shift+-",
		"command": "magit.reverting",
		"when": "editorTextFocus && editorLangId == 'magit' && vim.mode =~ /^(?!SearchInProgressMode|CommandlineInProgress).*$/"
	},
	{
		"key": "shift+v",
		"command": "-magit.reverting"
	},
	{
		"key": "shift+o",
		"command": "magit.resetting",
		"when": "editorTextFocus && editorLangId == 'magit' && vim.mode =~ /^(?!SearchInProgressMode|CommandlineInProgress).*$/"
	},
	{
		"key": "shift+x",
		"command": "-magit.resetting"
	},
	{
		"key": "x",
		"command": "-magit.reset-mixed"
	},
	{
		"key": "ctrl+u x",
		"command": "-magit.reset-hard"
	},
	{
		"key": "y",
		"command": "-magit.show-refs"
	},
	{
		"key": "y",
		"command": "vspacecode.showMagitRefMenu",
		"when": "editorTextFocus && editorLangId == 'magit' && vim.mode == 'Normal'"
	},
	{
		"key": "g",
		"command": "-magit.refresh",
		"when": "editorTextFocus && editorLangId == 'magit' && vim.mode =~ /^(?!SearchInProgressMode|CommandlineInProgress).*$/"
	},
	{
		"key": "g",
		"command": "vspacecode.showMagitRefreshMenu",
		"when": "editorTextFocus && editorLangId == 'magit' && vim.mode =~ /^(?!SearchInProgressMode|CommandlineInProgress).*$/"
	},
	{
		"key": "ctrl+j",
		"command": "workbench.action.quickOpenSelectNext",
		"when": "inQuickOpen"
	},
	{
		"key": "ctrl+k",
		"command": "workbench.action.quickOpenSelectPrevious",
		"when": "inQuickOpen"
	},
	{
		"key": "ctrl+j",
		"command": "selectNextSuggestion",
		"when": "suggestWidgetMultipleSuggestions && suggestWidgetVisible && textInputFocus"
	},
	{
		"key": "ctrl+k",
		"command": "selectPrevSuggestion",
		"when": "suggestWidgetMultipleSuggestions && suggestWidgetVisible && textInputFocus"
	},
	{
		"key": "ctrl+l",
		"command": "acceptSelectedSuggestion",
		"when": "suggestWidgetMultipleSuggestions && suggestWidgetVisible && textInputFocus"
	},
	{
		"key": "ctrl+j",
		"command": "showNextParameterHint",
		"when": "editorFocus && parameterHintsMultipleSignatures && parameterHintsVisible"
	},
	{
		"key": "ctrl+k",
		"command": "showPrevParameterHint",
		"when": "editorFocus && parameterHintsMultipleSignatures && parameterHintsVisible"
	},
	{
		"key": "ctrl+j",
		"command": "selectNextCodeAction",
		"when": "codeActionMenuVisible"
	},
	{
		"key": "ctrl+k",
		"command": "selectPrevCodeAction",
		"when": "codeActionMenuVisible"
	},
	{
		"key": "ctrl+l",
		"command": "acceptSelectedCodeAction",
		"when": "codeActionMenuVisible"
	},
	{
		"key": "ctrl+h",
		"command": "file-browser.stepOut",
		"when": "inFileBrowser"
	},
	{
		"key": "ctrl+l",
		"command": "file-browser.stepIn",
		"when": "inFileBrowser"
	},
	{
		"key": "ctrl+v",
		"command": "emacs-mcx.scrollUpCommand",
		"when": "editorTextFocus && vim.mode == 'Insert' && !suggestWidgetVisible"
	},
	{
		"key": "ctrl+v",
		"command": "-emacs-mcx.scrollUpCommand",
		"when": "editorTextFocus && !suggestWidgetVisible"
	},
	{
		"key": "ctrl+k",
		"command": "emacs-mcx.killLine",
		"when": "editorTextFocus && !editorReadonly && vim.mode == 'Insert' || terminalFocus"
	},
	{
		"key": "ctrl+k",
		"command": "-emacs-mcx.killLine",
		"when": "editorTextFocus && !editorReadonly"
	},
	{
		"key": "ctrl+a",
		"command": "emacs-mcx.moveBeginningOfLine",
		"when": "editorTextFocus && vim.mode == 'Insert'"
	},
	{
		"key": "ctrl+a",
		"command": "-emacs-mcx.moveBeginningOfLine",
		"when": "editorTextFocus"
	},
	{
		"key": "ctrl+u",
		"command": "emacs-mcx.universalArgument",
		"when": "editorTextFocus && vim.mode == 'Insert'"
	},
	{
		"key": "ctrl+u",
		"command": "-emacs-mcx.universalArgument",
		"when": "editorTextFocus"
	},
	{
		"key": "ctrl+r",
		"command": "emacs-mcx.isearchBackward",
		"when": "!findInputFocussed && vim.mode == 'Insert'"
	},
	{
		"key": "ctrl+r",
		"command": "-emacs-mcx.isearchBackward",
		"when": "!findInputFocussed"
	},
	{
		"key": "ctrl+n"	,
		"command": "search.action.focusNextSearchResult",
		"when": "hasSearchResult && searchInputBoxFocus || inSearchEditor && vim.mode != 'Insert'"
	},
	{
		"key": "ctrl+p",
		"command" : "search.action.focusPreviousSearchResult",
		"when": "hasSearchResult && searchInputBoxFocus || inSearchEditor && vim.mode != 'Insert'"
	},
	{
		"key": "ctrl+j",
		"command": "-emacs-mcx.newLine",
		"when": "editorTextFocus && !editorReadonly"
	},
	{
		"key": "ctrl+j",
		"command": "-workbench.action.togglePanel"
	},
	{
		"key": "ctrl+x j",
		"command": "workbench.action.togglePanel"
	},
	{
		"key": "ctrl+x j",
		"command": "-workbench.action.togglePanel",
		"when": "!terminalFocus"
	},
	{
		"key": "ctrl+b",
		"command": "emacs-mcx.backwardChar",
		"when": "editorTextFocus && vim.mode == 'Insert'"
	},
	{
		"key": "ctrl+b",
		"command": "-emacs-mcx.backwardChar",
		"when": "editorTextFocus"
	},
	{
		"key": "ctrl+e",
		"command": "emacs-mcx.moveEndOfLine",
		"when": "editorTextFocus && vim.mode == 'Insert'"
	},
	{
		"key": "ctrl+e",
		"command": "-emacs-mcx.moveEndOfLine",
		"when": "editorTextFocus"
	},
	{
		"key": "alt+backspace",
		"command": "emacs-mcx.backwardKillWord",
		"when": "editorTextFocus && !config.emacs-mcx.useMetaPrefixMacCmd && !editorReadonly && vim.mode == 'Insert'"
	},
	{
		"key": "alt+backspace",
		"command": "-emacs-mcx.backwardKillWord",
		"when": "editorTextFocus && !config.emacs-mcx.useMetaPrefixMacCmd && !editorReadonly"
	},
	{
		"key": "shift+alt+oem_6",
		"command": "emacs-mcx.forwardParagraph",
		"when": "editorTextFocus && !config.emacs-mcx.useMetaPrefixMacCmd && !suggestWidgetVisible && vim.mode == 'Insert'"
	},
	{
		"key": "shift+alt+oem_6",
		"command": "-emacs-mcx.forwardParagraph",
		"when": "editorTextFocus && !config.emacs-mcx.useMetaPrefixMacCmd && !suggestWidgetVisible"
	},
	{
		"key": "shift+alt+oem_4",
		"command": "emacs-mcx.backwardParagraph",
		"when": "editorTextFocus && !config.emacs-mcx.useMetaPrefixMacCmd && !suggestWidgetVisible && vim.mode == 'Insert'"
	},
	{
		"key": "shift+alt+oem_4",
		"command": "-emacs-mcx.backwardParagraph",
		"when": "editorTextFocus && !config.emacs-mcx.useMetaPrefixMacCmd && !suggestWidgetVisible"
	},
	{
		"key": "alt+v",
		"command": "emacs-mcx.scrollDownCommand",
		"when": "editorTextFocus && !config.emacs-mcx.useMetaPrefixMacCmd && !suggestWidgetVisible && vim.mode == 'Insert'"
	},
	{
		"key": "alt+v",
		"command": "-emacs-mcx.scrollDownCommand",
		"when": "editorTextFocus && !config.emacs-mcx.useMetaPrefixMacCmd && !suggestWidgetVisible"
	},
	{
		"key": "alt+m",
		"command": "emacs-mcx.backToIndentation",
		"when": "editorTextFocus && !config.emacs-mcx.useMetaPrefixMacCmd && vim.mode == 'Insert'"
	},
	{
		"key": "alt+m",
		"command": "-emacs-mcx.backToIndentation",
		"when": "editorTextFocus && !config.emacs-mcx.useMetaPrefixMacCmd"
	},
	{
		"key": "alt+b",
		"command": "emacs-mcx.backwardWord",
		"when": "editorTextFocus && vim.mode == 'Insert' && !config.emacs-mcx.useMetaPrefixMacCmd"
	},
	{
		"key": "alt+b",
		"command": "-emacs-mcx.backwardWord",
		"when": "editorTextFocus && !config.emacs-mcx.useMetaPrefixMacCmd"
	},
	{
		"key": "alt+f",
		"command": "emacs-mcx.forwardWord",
		"when": "editorTextFocus && !config.emacs-mcx.useMetaPrefixMacCmd && vim.mode == 'Insert'"
	},
	{
		"key": "alt+f",
		"command": "-emacs-mcx.forwardWord",
		"when": "editorTextFocus && !config.emacs-mcx.useMetaPrefixMacCmd"
	},
	{
		"key": "ctrl+f",
		"command": "emacs-mcx.forwardChar",
		"when": "editorTextFocus && vim.mode == 'Insert'"
	},
	{
		"key": "ctrl+f",
		"command": "-emacs-mcx.forwardChar",
		"when": "editorTextFocus"
	},
	{
		"key": "ctrl+s",
		"command": "emacs-mcx.isearchForward",
		"when": "!findInputFocussed && vim.mode == 'Insert'"
	},
	{
		"key": "ctrl+s",
		"command": "-emacs-mcx.isearchForward",
		"when": "!findInputFocussed"
	},
	{
		"key": "shift+alt+5",
		"command": "editor.action.startFindReplaceAction",
		"when": "editorFocus && !config.emacs-mcx.useMetaPrefixMacCmd && vim.mode == 'Insert'"
	},
	{
		"key": "shift+alt+5",
		"command": "-editor.action.startFindReplaceAction",
		"when": "editorFocus && !config.emacs-mcx.useMetaPrefixMacCmd"
	},
	{
		"key": "ctrl+alt+n",
		"command": "-emacs-mcx.addSelectionToNextFindMatch",
		"when": "editorFocus && !config.emacs-mcx.useMetaPrefixMacCmd"
	},
	{
		"key": "ctrl+alt+n",
		"command": "-emacs-mcx.addSelectionToNextFindMatch",
		"when": "config.emacs-mcx.useMetaPrefixMacCmd && editorFocus"
	},
	{
		"key": "ctrl+alt+p",
		"command": "-emacs-mcx.addSelectionToPreviousFindMatch",
		"when": "editorFocus && !config.emacs-mcx.useMetaPrefixMacCmd"
	},
	{
		"key": "ctrl+alt+p",
		"command": "-emacs-mcx.addSelectionToPreviousFindMatch",
		"when": "config.emacs-mcx.useMetaPrefixMacCmd && editorFocus"
	},
	{
		"key": "ctrl+d",
		"command": "emacs-mcx.deleteForwardChar",
		"when": "editorTextFocus && !editorReadonly && vim.mode == 'Insert'"
	},
	{
		"key": "ctrl+d",
		"command": "-emacs-mcx.deleteForwardChar",
		"when": "editorTextFocus && !editorReadonly"
	},
	{
		"key": "ctrl+h",
		"command": "emacs-mcx.deleteBackwardChar",
		"when": "editorTextFocus && !editorReadonly && vim.mode == 'Insert'"
	},
	{
		"key": "ctrl+h",
		"command": "-emacs-mcx.deleteBackwardChar",
		"when": "editorTextFocus && !editorReadonly"
	},
	{
		"key": "alt+d",
		"command": "emacs-mcx.killWord",
		"when": "editorTextFocus && !config.emacs-mcx.useMetaPrefixMacCmd && !editorReadonly && vim.mode == 'Insert'"
	},
	{
		"key": "alt+d",
		"command": "-emacs-mcx.killWord",
		"when": "editorTextFocus && !config.emacs-mcx.useMetaPrefixMacCmd && !editorReadonly"
	},
	{
		"key": "ctrl+shift+backspace",
		"command": "emacs-mcx.killWholeLine",
		"when": "editorTextFocus && vim.mode == 'Insert'"
	},
	{
		"key": "ctrl+shift+backspace",
		"command": "-emacs-mcx.killWholeLine",
		"when": "editorTextFocus"
	},
	{
		"key": "ctrl+w",
		"command": "emacs-mcx.killRegion",
		"when": "editorTextFocus && !editorReadonly && vim.mode == 'Insert'"
	},
	{
		"key": "ctrl+w",
		"command": "-emacs-mcx.killRegion",
		"when": "editorTextFocus && !editorReadonly"
	},
	{
		"key": "alt+w",
		"command": "-emacs-mcx.copyRectangleAsKill",
		"when": "editorTextFocus && emacs-mcx.acceptingRectCommand && !config.emacs-mcx.useMetaPrefixMacCmd"
	},
	{
		"key": "alt+w",
		"command": "emacs-mcx.copyRegion",
		"when": "editorTextFocus && !config.emacs-mcx.useMetaPrefixMacCmd && vim.mode == 'Insert'"
	},
	{
		"key": "alt+w",
		"command": "-emacs-mcx.copyRegion",
		"when": "editorTextFocus && !config.emacs-mcx.useMetaPrefixMacCmd"
	},
	{
		"key": "ctrl+y",
		"command": "emacs-mcx.yank",
		"when": "editorTextFocus && !editorReadonly && vim.mode == 'Insert'"
	},
	{
		"key": "ctrl+y",
		"command": "-emacs-mcx.yank",
		"when": "editorTextFocus && !editorReadonly"
	},
	{
		"key": "alt+y",
		"command": "emacs-mcx.yank-pop",
		"when": "editorTextFocus && !config.emacs-mcx.useMetaPrefixMacCmd && !editorReadonly && vim.mode == 'Insert'"
	},
	{
		"key": "alt+y",
		"command": "-emacs-mcx.yank-pop",
		"when": "editorTextFocus && !config.emacs-mcx.useMetaPrefixMacCmd && !editorReadonly"
	},
	{
		"key": "ctrl+o",
		"command": "lineBreakInsert",
		"when": "editorTextFocus && !editorReadonly && vim.mode == 'Insert'"
	},
	{
		"key": "ctrl+o",
		"command": "-lineBreakInsert",
		"when": "editorTextFocus && !editorReadonly"
	},
	{
		"key": "ctrl+m",
		"command": "emacs-mcx.newLine",
		"when": "editorTextFocus && !editorReadonly && vim.mode == 'Insert'"
	},
	{
		"key": "ctrl+m",
		"command": "-emacs-mcx.newLine",
		"when": "editorTextFocus && !editorReadonly"
	},
	{
		"key": "ctrl+x ctrl+o",
		"command": "emacs-mcx.deleteBlankLines",
		"when": "editorTextFocus && !editorReadonly && vim.mode == 'Insert'"
	},
	{
		"key": "ctrl+x ctrl+o",
		"command": "-emacs-mcx.deleteBlankLines",
		"when": "editorTextFocus && !editorReadonly"
	},
	{
		"key": "ctrl+x h",
		"command": "editor.action.selectAll",
		"when": "editorTextFocus && vim.mode == 'Insert'"
	},
	{
		"key": "ctrl+x h",
		"command": "-editor.action.selectAll",
		"when": "editorTextFocus"
	},
	{
		"key": "ctrl+x",
		"command": "extension.vim_ctrl+x",
		"when": "editorTextFocus && vim.active && vim.use<C-x> && !inDebugRepl && vim.mode == 'Normal'"
	},
	{
		"key": "ctrl+x",
		"command": "-extension.vim_ctrl+x",
		"when": "editorTextFocus && vim.active && vim.use<C-x> && !inDebugRepl"
	},
	{
		"key": "alt+c",
		"command": "emacs-mcx.transformToTitlecase",
		"when": "editorTextFocus && !config.emacs-mcx.useMetaPrefixMacCmd && !editorReadonly && vim.mode == 'Insert'"
	},
	{
		"key": "alt+c",
		"command": "-emacs-mcx.transformToTitlecase",
		"when": "editorTextFocus && !config.emacs-mcx.useMetaPrefixMacCmd && !editorReadonly"
	},
	{
		"key": "shift+alt+6",
		"command": "emacs-mcx.executeCommands",
		"when": "editorTextFocus && !config.emacs-mcx.useMetaPrefixMacCmd && !editorReadOnly && vim.mode == 'Insert'"
	},
	{
		"key": "shift+alt+6",
		"command": "-emacs-mcx.executeCommands",
		"when": "editorTextFocus && !config.emacs-mcx.useMetaPrefixMacCmd && !editorReadOnly"
	},
	{
		"key": "ctrl+q",
		"command": "-extension.vim_winCtrlQ",
		"when": "editorTextFocus && vim.active && vim.use<C-q> && !inDebugRepl"
	},
	{
		"key": "space",
		"command": "emacs-mcx.isearchExit",
		"when": "editorFocus && findWidgetVisible && !config.emacs-mcx.cursorMoveOnFindWidget && !isComposing && !replaceInputFocussed"
	},
	{
		"key": "ctrl+b",
		"command": "-emacs-mcx.isearchExit",
		"when": "editorFocus && findWidgetVisible && !config.emacs-mcx.cursorMoveOnFindWidget && !isComposing && !replaceInputFocussed"
	},
	{
		"key": "ctrl+x space",
		"command": "-emacs-mcx.rectangleMarkMode",
		"when": "editorTextFocus"
	},
	{
		"key": "ctrl+x r",
		"command": "-emacs-mcx.startRectCommand",
		"when": "editorTextFocus"
	},
	{
		"key": "c",
		"command": "-emacs-mcx.clearRectangle",
		"when": "editorTextFocus && emacs-mcx.acceptingRectCommand"
	},
	{
		"key": "d",
		"command": "-emacs-mcx.deleteRectangle",
		"when": "editorTextFocus && emacs-mcx.acceptingRectCommand"
	},
	{
		"key": "k",
		"command": "-emacs-mcx.killRectangle",
		"when": "editorTextFocus && emacs-mcx.acceptingRectCommand"
	},
	{
		"key": "o",
		"command": "-emacs-mcx.openRectangle",
		"when": "editorTextFocus && emacs-mcx.acceptingRectCommand"
	},
	{
		"key": "p",
		"command": "-emacs-mcx.replaceKillRingToRectangle",
		"when": "editorTextFocus && emacs-mcx.acceptingRectCommand"
	},
	{
		"key": "y",
		"command": "-emacs-mcx.yankRectangle",
		"when": "editorTextFocus && emacs-mcx.acceptingRectCommand"
	},
	{
		"key": "alt+w",
		"command": "-emacs-mcx.copyRectangleAsKill",
		"when": "config.emacs-mcx.useMetaPrefixMacCmd && editorTextFocus && emacs-mcx.acceptingRectCommand"
	},
	{
		"key": "escape w",
		"command": "-emacs-mcx.copyRectangleAsKill",
		"when": "config.emacs-mcx.useMetaPrefixEscape && editorTextFocus && emacs-mcx.acceptingRectCommand"
	},
	{
		"key": "ctrl+oem_4 w",
		"command": "-emacs-mcx.copyRectangleAsKill",
		"when": "config.emacs-mcx.useMetaPrefixCtrlLeftBracket && editorTextFocus && emacs-mcx.acceptingRectCommand"
	}
]
